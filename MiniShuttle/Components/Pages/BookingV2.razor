@page "/book-service-v2"
@using MiniShuttle.Models
@using MiniShuttle.Service
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject BookingService BookingService
@implements IAsyncDisposable

<PageTitle>Mini Shuttle Booking Service</PageTitle>

<div class="container-fluid py-4">
    <div class="row">
        <!-- Booking Form -->
        <div class="col">
            <!-- Booking Confirmation -->
            @if (isBookingSuccess)
            {
                <div class="card mt-3 border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">Booking Confirmed!</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-success">
                            <p>Booking ID: @booking.Id</p>
                            <p>Service: @booking.ServiceType</p>
                            <p>Date: @booking.BookingDateTime.ToString("dd, yyyy HH:mm")</p>
                            <p>From: @booking.PickupAddress</p>
                            <p>To: @booking.DestinationAddress</p>
                            @if (booking.IsRoundTrip)
                            {
                                <p>Return Date:  @booking.ReturnRoundDateTime.ToString("dd, yyyy HH:mm")</p>
                            }
                            <p>Total Cost: @booking.EstimatedCost.ToString("F2")</p>
                        </div>
                    </div>
                </div>
            }
            else
            {

                <main class="py-5">
                    <div class="container">
                        <div class="row justify-content-center">
                            <div class="col-lg-8">
                                <div class="card shadow">
                                    <div class="card-header bg-primary text-white text-center py-4">
                                        <h1 class="h3 mb-1">
                                            <i class="fas fa-car me-2"></i>
                                            Request Airport Transportation
                                        </h1>
                                        <p class="mb-0">Fill out the form below to book your ride</p>
                                    </div>
                                    <div class="card-body p-4">
                                        <EditForm Model="booking" OnValidSubmit="HandleValidSubmit">
                                            <DataAnnotationsValidator />
                                            <ValidationSummary />
                                            <!-- Trip Details -->
                                            <h6 class="text-muted mb-3">Trip Details</h6>
                                            <div class="mb-3">
                                                <label class="form-label">Service Type *</label>
                                                <InputSelect @bind-Value="booking.ServiceType" class="form-select" @bind-Value:after=OnServiceTypeChanged>
                                                    <option value="">-- Select Service --</option>
                                                    <option value="@ServiceType.Standard">Standard</option>
                                                    <option value="@ServiceType.Premium">Premium</option>
                                                    <option value="@ServiceType.Luxury">Luxury</option>
                                                </InputSelect>
                                                <ValidationMessage For="@(() => booking.ServiceType)" />
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Pickup Location *</label>
                                                <div class="input-group position-relative">
                                                    <input type="text"
                                                           id="pickupSearchInput"
                                                           class="form-control"
                                                           placeholder="Search for pickup location..."
                                                           value="@booking.PickupAddress"
                                                           @oninput="OnPickupInputChanged" />
                                                    <button type="button" class="btn btn-outline-primary" @onclick="GetCurrentLocation">
                                                        📍
                                                    </button>
                                                    <div id="pickupSuggestions" class="autocomplete-suggestions"></div>
                                                </div>
                                                <small class="text-muted">Type to search or click 📍 to use current location</small>
                                            </div>

                                            <div class="mb-3">
                                                <label class="form-label">Destination *</label>
                                                <div class="position-relative">
                                                    <input type="text"
                                                           id="destinationSearchInput"
                                                           class="form-control"
                                                           placeholder="Search for destination..."
                                                           value="@booking.DestinationAddress"
                                                           @oninput="OnDestinationInputChanged" />
                                                    <div id="destinationSuggestions" class="autocomplete-suggestions"></div>
                                                </div>
                                                <small class="text-muted">Type to search or click on map to select destination</small>
                                            </div>
                                            <!-- Map -->
                                            <div class="col-lg-12">
                                                <div class="card shadow">
                                                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                                                        <div>
                                                            <h5 class="mb-0">📍 Select Your Locations</h5>
                                                            <small>Search for locations or click on the map</small>
                                                        </div>
                                                        @if (isCalculatingRoute)
                                                        {
                                                            <div class="spinner-border spinner-border-sm text-light" role="status">
                                                                <span class="visually-hidden">Calculating route...</span>
                                                            </div>
                                                        }
                                                    </div>
                                                    <div class="card-body p-0">
                                                        <div id="bookingMap" style="height: 600px; width: 100%;"></div>
                                                    </div>
                                                </div>
                                            </div>


                                            <div class="mb-3">
                                                <label class="form-label">Pickup Date & Time *</label>
                                                <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="booking.BookingDateTime" class="form-control" />
                                                <ValidationMessage For="@(() => booking.BookingDateTime)" />
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-check-label">I want round trip</label>
                                                <InputCheckbox @bind-Value=booking.IsRoundTrip class="form-check-input" @bind-Value:after=OnRoundTripChanged></InputCheckbox>
                                                <ValidationMessage For="@(() => booking.IsRoundTrip)" />

                                            </div>
                                            @if (booking.IsRoundTrip)
                                            {
                                                <div class="mb-3">
                                                    <label class="form-label">Return Date & Time *</label>
                                                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="booking.ReturnRoundDateTime" class="form-control" />
                                                    <ValidationMessage For="@(() => booking.ReturnRoundDateTime)" />
                                                </div>
                                            }

                                            <!-- Enhanced Route Information Display -->
                                            @if (booking.EstimatedDistance > 0)
                                            {
                                                <div class="alert @(hasActualRoute ? "alert-success" : "alert-warning")">
                                                    @if (hasActualRoute)
                                                    {
                                                        <div class="d-flex align-items-center mb-2">
                                                            <span class="badge bg-success me-2">✅ Actual Route</span>
                                                            <small class="text-muted">Based on real road data</small>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="d-flex align-items-center mb-2">
                                                            <span class="badge bg-warning text-dark me-2">⚠️ Estimated Route</span>
                                                            <small class="text-muted">Direct distance calculation</small>
                                                        </div>
                                                    }

                                                    <div class="row">
                                                        <div class="col-md-4">
                                                            <strong>📏 Distance:</strong><br />
                                                            <span class="h6 text-primary">@booking.EstimatedDistance.ToString("F2") km</span>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <strong>⏱️ Duration:</strong><br />
                                                            <span class="h6 text-info">~@booking.EstimatedDuration min</span>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <strong>💰 Cost:</strong><br />
                                                            <span class="h6 text-success">$@booking.EstimatedCost.ToString("F2")</span>
                                                        </div>
                                                    </div>

                                                    @if (booking.IsRoundTrip)
                                                    {
                                                        <hr />
                                                        <small class="text-muted">
                                                            <strong>Round Trip:</strong> Return journey included (×2 distance and cost)
                                                        </small>
                                                    }
                                                </div>
                                            }

                                            <!-- Loading state for route calculation -->
                                            @if (isCalculatingRoute && booking.EstimatedDistance == 0)
                                            {
                                                <div class="alert alert-info">
                                                    <div class="d-flex align-items-center">
                                                        <div class="spinner-border spinner-border-sm me-3" role="status">
                                                            <span class="visually-hidden">Loading...</span>
                                                        </div>
                                                        <div>
                                                            <strong>Calculating route...</strong><br />
                                                            <small>Please wait while we find the best route for your journey.</small>
                                                        </div>
                                                    </div>
                                                </div>
                                            }

                                            <div class="d-grid gap-2">
                                                <button type="submit" class="btn btn-success btn-lg" disabled="@(isSubmitting || isCalculatingRoute || booking.EstimatedDistance == 0)">
                                                    @if (isSubmitting)
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                                    }
                                                    @if (booking.EstimatedDistance == 0)
                                                    {
                                                        <span>Select Pickup & Destination</span>
                                                    }
                                                    else if (isCalculatingRoute)
                                                    {
                                                        <span>Calculating Route...</span>
                                                    }
                                                    else
                                                    {
                                                        <span>Confirm Booking - $@booking.EstimatedCost.ToString("F2")</span>
                                                    }
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" @onclick="ClearForm">
                                                    Clear
                                                </button>
                                            </div>

                                        </EditForm>
                                        @if (!string.IsNullOrEmpty(msg))
                                        {
                                            <p class="alert alert-info">@msg</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>

            }
        </div>

    </div>
</div>

<style>
    .autocomplete-suggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background: white;
        border: 1px solid #ddd;
        border-top: none;
        border-radius: 0 0 4px 4px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        max-height: 200px;
        overflow-y: auto;
        z-index: 1000;
        display: none;
    }

    .autocomplete-suggestion {
        padding: 10px 15px;
        cursor: pointer;
        border-bottom: 1px solid #eee;
        font-size: 14px;
    }

        .autocomplete-suggestion:hover {
            background-color: #f8f9fa;
        }

        .autocomplete-suggestion.selected {
            background-color: #007bff;
            color: white;
        }

        .autocomplete-suggestion:last-child {
            border-bottom: none;
        }

    .position-relative {
        position: relative;
    }

    .loading-suggestion {
        padding: 10px 15px;
        text-align: center;
        color: #6c757d;
        font-style: italic;
    }

    /* Enhanced route info styling */
    .alert .row .col-md-4 {
        text-align: center;
        margin-bottom: 1rem;
    }

    @@media (max-width: 768px) {
        .alert .row .col-md-4 {
            margin-bottom: 1rem;
        }
    }
</style>

@code {
    private BookingRequest booking = new();
    private bool isBookingSuccess;
    private bool isSubmitting = false;
    private bool isCalculatingRoute = false;
    private bool hasActualRoute = false;
    private string? msg;
    private DotNetObjectReference<BookingV2>? objRef;

    // Configuration - Add your OpenRouteService API key here
    private const string ROUTING_API_KEY = "5b3ce3597851110001cf6248d0606398520f425499ec85c6f0e50dd4"; // Replace with your actual API key

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initBookingMap", objRef);
            await JS.InvokeVoidAsync("initAutocomplete");

            // Set the routing API key
            await JS.InvokeVoidAsync("setRoutingApiKey", ROUTING_API_KEY);

            // Automatically get current location as default pickup
            await JS.InvokeVoidAsync("getCurrentLocationOnLoad");
        }
    }

    private async Task OnPickupInputChanged(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString() ?? "";
        booking.PickupAddress = searchTerm;

        if (!string.IsNullOrWhiteSpace(searchTerm) && searchTerm.Length > 2)
        {
            await JS.InvokeVoidAsync("searchLocation", searchTerm, "pickup");
        }
        else
        {
            await JS.InvokeVoidAsync("hideSuggestions", "pickup");
        }
    }

    private async Task OnDestinationInputChanged(ChangeEventArgs e)
    {
        var searchTerm = e.Value?.ToString() ?? "";
        booking.DestinationAddress = searchTerm;

        if (!string.IsNullOrWhiteSpace(searchTerm) && searchTerm.Length > 2)
        {
            await JS.InvokeVoidAsync("searchLocation", searchTerm, "destination");
        }
        else
        {
            await JS.InvokeVoidAsync("hideSuggestions", "destination");
        }
    }

    private async Task GetCurrentLocation()
    {
        await JS.InvokeVoidAsync("getCurrentLocation");
    }

    [JSInvokable]
    public void UpdatePickupLocation(double lat, double lng, string address)
    {
        booking.PickupLat = lat;
        booking.PickupLng = lng;
        booking.PickupAddress = address;
        StateHasChanged();
        // Route calculation will be triggered automatically by the JavaScript
    }

    [JSInvokable]
    public void UpdateDestination(double lat, double lng, string address)
    {
        booking.DestinationLat = lat;
        booking.DestinationLng = lng;
        booking.DestinationAddress = address;
        StateHasChanged();
        // Route calculation will be triggered automatically by the JavaScript
    }

    // NEW: Handle route calculation start
    [JSInvokable]
    public async Task OnRouteCalculationStart()
    {
        isCalculatingRoute = true;
        await InvokeAsync(StateHasChanged);
    }

    // NEW: Handle route calculation completion
    [JSInvokable]
    public async Task OnRouteCalculationComplete()
    {
        isCalculatingRoute = false;
        await InvokeAsync(StateHasChanged);
    }

    // NEW: Handle route information from JavaScript
    [JSInvokable]
    public async Task UpdateRouteInformation(RouteInformation routeInfo)
    {
        booking.EstimatedDistance = routeInfo.Distance;
        booking.EstimatedDuration = routeInfo.Duration;
        hasActualRoute = routeInfo.IsActualRoute;

        // Calculate cost based on actual route distance
        if (booking.ServiceType != 0)
        {
            booking.EstimatedCost = BookingService.CalculateCost(booking.EstimatedDistance, booking.ServiceType, booking.IsRoundTrip);
        }

        isCalculatingRoute = false;
        await InvokeAsync(StateHasChanged);
    }

    // UPDATED: Remove manual calculation since it's now handled by JavaScript
    private void OnServiceTypeChanged()
    {
        // Recalculate cost if we already have distance
        if (booking.EstimatedDistance > 0 && booking.ServiceType != 0)
        {
            booking.EstimatedCost = BookingService.CalculateCost(booking.EstimatedDistance, booking.ServiceType, booking.IsRoundTrip);
            StateHasChanged();
        }
    }

    private void OnRoundTripChanged()
    {
        // Recalculate cost when round trip option changes
        if (booking.EstimatedDistance > 0 && booking.ServiceType != 0)
        {
            booking.EstimatedCost = BookingService.CalculateCost(booking.EstimatedDistance, booking.ServiceType, booking.IsRoundTrip);
            StateHasChanged();
        }
    }

    private void HandleValidSubmit()
    {
        if (booking.PickupLat == 0 || booking.DestinationLat == 0)
        {
            msg = "Please select both pickup and destination locations.";
            return;
        }

        if (booking.EstimatedDistance == 0)
        {
            msg = "Please wait for route calculation to complete.";
            return;
        }

        isSubmitting = true;

        try
        {
            var bookingId = BookingService.CreateBooking(booking);
            isBookingSuccess = true;
            msg = ""; // Clear any previous messages
        }
        catch (Exception ex)
        {
            msg = $"Error creating booking: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task ClearForm()
    {
        booking = new BookingRequest();
        msg = "";
        isBookingSuccess = false;
        isCalculatingRoute = false;
        hasActualRoute = false;
        await JS.InvokeVoidAsync("clearBookingMap");
        await JS.InvokeVoidAsync("clearInputs");
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        objRef?.Dispose();
    }

    // Helper class for route information from JavaScript
    public class RouteInformation
    {
        public double Distance { get; set; }
        public int Duration { get; set; }
        public bool IsActualRoute { get; set; }
        public double PickupLat { get; set; }
        public double PickupLng { get; set; }
        public double DestinationLat { get; set; }
        public double DestinationLng { get; set; }
    }
}